{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { projectstorage, projectfirestore, timestamp } from '../firebase/config';\n\nconst useStorage = file => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n  useEffect(() => {\n    // references\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectfirestore.collection('images');\n    storageRef.put(file).on('state_changed', snap => {\n      let percentage = snap.bytesTransferred / snap.totalBytes * 100;\n      setProgress(percentage);\n    }, err => {\n      setError(err);\n    }, async () => {\n      const url = await storageRef.getDownloadURL();\n      const createdAt = timestamp();\n      await collectionRef.add({\n        url,\n        createdAt\n      });\n      setUrl(url);\n    });\n  }, [file]);\n  return {\n    progress,\n    url,\n    error\n  };\n};\n\nexport default useStorage;","map":{"version":3,"sources":["/Users/akasharelli/Desktop/Photo Gallery/src/Hooks/useStorage.js"],"names":["useState","useEffect","projectstorage","projectfirestore","timestamp","useStorage","file","progress","setProgress","error","setError","url","setUrl","storageRef","projectStorage","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","getDownloadURL","createdAt","add"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,cAAT,EAAyBC,gBAAzB,EAA2CC,SAA3C,QAA4D,oBAA5D;;AAEA,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAC3B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,GAAD,EAAMC,MAAN,IAAgBZ,QAAQ,CAAC,IAAD,CAA9B;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMY,UAAU,GAAGC,cAAc,CAACC,GAAf,CAAmBT,IAAI,CAACU,IAAxB,CAAnB;AACA,UAAMC,aAAa,GAAGd,gBAAgB,CAACe,UAAjB,CAA4B,QAA5B,CAAtB;AAEAL,IAAAA,UAAU,CAACM,GAAX,CAAeb,IAAf,EAAqBc,EAArB,CAAwB,eAAxB,EAA0CC,IAAD,IAAU;AACjD,UAAIC,UAAU,GAAID,IAAI,CAACE,gBAAL,GAAwBF,IAAI,CAACG,UAA9B,GAA4C,GAA7D;AACAhB,MAAAA,WAAW,CAACc,UAAD,CAAX;AACD,KAHD,EAGIG,GAAD,IAAS;AACVf,MAAAA,QAAQ,CAACe,GAAD,CAAR;AACD,KALD,EAKG,YAAY;AACb,YAAMd,GAAG,GAAG,MAAME,UAAU,CAACa,cAAX,EAAlB;AACA,YAAMC,SAAS,GAAGvB,SAAS,EAA3B;AACA,YAAMa,aAAa,CAACW,GAAd,CAAkB;AAAEjB,QAAAA,GAAF;AAAOgB,QAAAA;AAAP,OAAlB,CAAN;AACAf,MAAAA,MAAM,CAACD,GAAD,CAAN;AACD,KAVD;AAWD,GAhBQ,EAgBN,CAACL,IAAD,CAhBM,CAAT;AAkBA,SAAO;AAAEC,IAAAA,QAAF;AAAYI,IAAAA,GAAZ;AAAiBF,IAAAA;AAAjB,GAAP;AACD,CAxBD;;AA0BA,eAAeJ,UAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport { projectstorage, projectfirestore, timestamp } from '../firebase/config';\n\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n\n  useEffect(() => {\n    // references\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectfirestore.collection('images');\n    \n    storageRef.put(file).on('state_changed', (snap) => {\n      let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n      setProgress(percentage);\n    }, (err) => {\n      setError(err);\n    }, async () => {\n      const url = await storageRef.getDownloadURL();\n      const createdAt = timestamp();\n      await collectionRef.add({ url, createdAt });\n      setUrl(url);\n    });\n  }, [file]);\n\n  return { progress, url, error };\n}\n\nexport default useStorage;"]},"metadata":{},"sourceType":"module"}